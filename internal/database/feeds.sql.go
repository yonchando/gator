// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: feeds.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createFeed = `-- name: CreateFeed :one
insert into feeds (id, name, url, user_id, created_at, updated_at)
values ($1,$2,$3,$4,$5,$6) returning id, name, url, user_id, created_at, updated_at
`

type CreateFeedParams struct {
	ID        uuid.UUID
	Name      string
	Url       string
	UserID    uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateFeed(ctx context.Context, arg CreateFeedParams) (Feed, error) {
	row := q.db.QueryRowContext(ctx, createFeed,
		arg.ID,
		arg.Name,
		arg.Url,
		arg.UserID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Url,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAllFeed = `-- name: DeleteAllFeed :exec
DELETE FROM feeds
`

func (q *Queries) DeleteAllFeed(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllFeed)
	return err
}

const getFeed = `-- name: GetFeed :one
select id, name, url, user_id, created_at, updated_at from feeds where id = $1 limit 1
`

func (q *Queries) GetFeed(ctx context.Context, id uuid.UUID) (Feed, error) {
	row := q.db.QueryRowContext(ctx, getFeed, id)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Url,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getFeedByName = `-- name: GetFeedByName :one
SELECT id, name, url, user_id, created_at, updated_at FROM feeds where name = $1
`

func (q *Queries) GetFeedByName(ctx context.Context, name string) (Feed, error) {
	row := q.db.QueryRowContext(ctx, getFeedByName, name)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Url,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getFeedByUrl = `-- name: GetFeedByUrl :one
SELECT id, name, url, user_id, created_at, updated_at FROM feeds where url = $1
`

func (q *Queries) GetFeedByUrl(ctx context.Context, url string) (Feed, error) {
	row := q.db.QueryRowContext(ctx, getFeedByUrl, url)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Url,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getFeedFollowsForUser = `-- name: GetFeedFollowsForUser :many
SELECT f.id as feed_id, f.name as feed_name, 
    u.id as user_id, u.name as user_name
    FROM feeds f
    left join feed_follows ff on f.id = ff.feed_id
    left join users u on ff.user_id = u.id
    WHERE u.id = $1
`

type GetFeedFollowsForUserRow struct {
	FeedID   uuid.UUID
	FeedName string
	UserID   uuid.NullUUID
	UserName sql.NullString
}

func (q *Queries) GetFeedFollowsForUser(ctx context.Context, id uuid.UUID) ([]GetFeedFollowsForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedFollowsForUser, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedFollowsForUserRow
	for rows.Next() {
		var i GetFeedFollowsForUserRow
		if err := rows.Scan(
			&i.FeedID,
			&i.FeedName,
			&i.UserID,
			&i.UserName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFeedWithUser = `-- name: GetFeedWithUser :many
SELECT f.id as feed_id, f.name as feed_name, f.url,
    u.id as user_id, u.name as user_name
FROM feeds f
left join users u on u.id = f.user_id
`

type GetFeedWithUserRow struct {
	FeedID   uuid.UUID
	FeedName string
	Url      string
	UserID   uuid.NullUUID
	UserName sql.NullString
}

func (q *Queries) GetFeedWithUser(ctx context.Context) ([]GetFeedWithUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedWithUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedWithUserRow
	for rows.Next() {
		var i GetFeedWithUserRow
		if err := rows.Scan(
			&i.FeedID,
			&i.FeedName,
			&i.Url,
			&i.UserID,
			&i.UserName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFeeds = `-- name: GetFeeds :many
SELECT id, name, url, user_id, created_at, updated_at FROM feeds
`

func (q *Queries) GetFeeds(ctx context.Context) ([]Feed, error) {
	rows, err := q.db.QueryContext(ctx, getFeeds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Feed
	for rows.Next() {
		var i Feed
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Url,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
